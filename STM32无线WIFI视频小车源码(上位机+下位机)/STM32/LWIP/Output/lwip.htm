<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\lwip.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\lwip.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Mon Nov 24 16:19:40 2014
<BR><P>
<H3>Maximum Stack Usage =        624 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[69]">OS_CPU_SR_Save</a>
 <LI><a href="#[6c]">OS_CPU_SR_Restore</a>
 <LI><a href="#[a8]">OSStartHighRdy</a>
 <LI><a href="#[a6]">OSCtxSw</a>
 <LI><a href="#[a3]">OSIntCtxSw</a>
 <LI><a href="#[8]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry7.o(.ARM.Collect$$$$00000007)
 <LI><a href="#[47]">SystemInit_ExtMemCtl</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[49]">Task_LED</a> from app.o(.text) referenced from main.o(.text)
 <LI><a href="#[4a]">ethernet_input</a> from etharp.o(.text) referenced from udp_config_app.o(.text)
 <LI><a href="#[4b]">ethernetif_init</a> from ethernetif.o(.text) referenced from udp_config_app.o(.text)
 <LI><a href="#[4c]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[4d]">tcp_accept_null</a> from tcp.o(.text) referenced from tcp.o(.text)
 <LI><a href="#[4e]">ipfrag_free_pbuf_custom</a> from ip_frag.o(.text) referenced from ip_frag.o(.text)
 <LI><a href="#[4f]">etharp_output</a> from etharp.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[50]">low_level_output</a> from ethernetif.o(.text) referenced from ethernetif.o(.text)
 <LI><a href="#[51]">fputc</a> from usart1.o(.text) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[75]">Task_LED3</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[72]">Task_LED2</a> from app.o(.text) referenced from app.o(.text)
 <LI><a href="#[82]">UDP_receive</a> from udp_config_app.o(.text) referenced from udp_config_app.o(.text)
 <LI><a href="#[8e]">OS_TaskStat</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[95]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[13b]">tcp_recv_null</a> from tcp.o(.text) referenced from tcp.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1ae]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ab]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1af]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[47]"></a>SystemInit_ExtMemCtl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[191]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_NVIC_Configuration
</UL>

<P><STRONG><a name="[192]"></a>NVIC_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_NVIC_Configuration
</UL>

<P><STRONG><a name="[1b0]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>EXTI_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>EXTI_Init</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_EXTI_Configuration
</UL>

<P><STRONG><a name="[1b4]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_EXTI_Configuration
</UL>

<P><STRONG><a name="[1b5]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>GPIO_DeInit</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[56]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[70]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Configuration
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GPIO_Configuration
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Configuration
</UL>

<P><STRONG><a name="[1b7]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReceiveByte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
</UL>

<P><STRONG><a name="[1b8]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED3
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED2
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReceiveByte
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SendByte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_NoAck
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Ack
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
</UL>

<P><STRONG><a name="[73]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Configuration
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED3
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED2
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReceiveByte
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SendByte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_NoAck
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Ack
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
</UL>

<P><STRONG><a name="[1bb]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_EXTI_Configuration
</UL>

<P><STRONG><a name="[1c1]"></a>RCC_DeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[57]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[1c3]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>RCC_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[1d3]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Configuration
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GPIO_Configuration
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Configuration
</UL>

<P><STRONG><a name="[1d4]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[5a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[1d5]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[f0]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[5b]"></a>I2S_Init</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[1db]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[1dd]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[f4]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[1e0]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>

<P><STRONG><a name="[1e8]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>USART_DeInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[5e]"></a>USART_Init</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[1eb]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[1ee]"></a>USART_ITConfig</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>USART_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_printf
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1f5]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_printf
</UL>

<P><STRONG><a name="[1fe]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>USART_GetITStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[201]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = EXTI0_IRQHandler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SysTick_init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[62]"></a>BSP_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_Init &rArr; LED_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>LED_GPIO_Config</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[72]"></a>Task_LED2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Task_LED2 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>Task_LED3</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Task_LED3 &rArr; UDP_task &rArr; LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_GPIO_Configuration
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ov7725_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_imag_and_discor
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_GPIO_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>Task_LED</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Task_LED &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>LwIP_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, udp_config_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
</UL>

<P><STRONG><a name="[82]"></a>UDP_receive</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, udp_config_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UDP_receive &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_printf
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp_config_app.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>UDP_task</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, udp_config_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = UDP_task &rArr; LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED3
</UL>

<P><STRONG><a name="[8c]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[8e]"></a>OS_TaskStat</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[63]"></a>OSInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[68]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a4]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a5]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[a7]"></a>OSSchedUnlock</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[65]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[67]"></a>OSTimeTick</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[202]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[ac]"></a>OS_EventTaskRemove</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[ab]"></a>OS_EventTaskRdy</STRONG> (Thumb, 124 bytes, Stack size 36 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[c9]"></a>OS_EventTaskWait</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[c5]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[d9]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[b6]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
</UL>

<P><STRONG><a name="[ad]"></a>OS_TCBInit</STRONG> (Thumb, 366 bytes, Stack size 56 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[b0]"></a>OSFlagAccept</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b1]"></a>OSFlagCreate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b3]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[b4]"></a>OSFlagDel</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b5]"></a>OSFlagNameGet</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b7]"></a>OSFlagNameSet</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b8]"></a>OSFlagPend</STRONG> (Thumb, 632 bytes, Stack size 80 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ba]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[bb]"></a>OSFlagPost</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[bc]"></a>OSFlagQuery</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[9e]"></a>OS_FlagInit</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[bd]"></a>OSMemCreate</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[be]"></a>OSMemGet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[bf]"></a>OSMemNameGet</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c0]"></a>OSMemNameSet</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c1]"></a>OSMemPut</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c2]"></a>OSMemQuery</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[9f]"></a>OS_MemInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c3]"></a>OSQAccept</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c4]"></a>OSQCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c6]"></a>OSQDel</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c7]"></a>OSQFlush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c8]"></a>OSQPend</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ca]"></a>OSQPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[cb]"></a>OSQPost</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[cc]"></a>OSQPostFront</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[cd]"></a>OSQPostOpt</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ce]"></a>OSQQuery</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a0]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[cf]"></a>OSTaskChangePrio</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[64]"></a>OSTaskCreate</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[93]"></a>OSTaskCreateExt</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[d2]"></a>OSTaskDel</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[d5]"></a>OSTaskDelReq</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d6]"></a>OSTaskNameGet</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[94]"></a>OSTaskNameSet</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
</UL>

<P><STRONG><a name="[d7]"></a>OSTaskResume</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[8d]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[90]"></a>OSTaskSuspend</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[d8]"></a>OSTaskQuery</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[da]"></a>OSTaskRegGet</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[db]"></a>OSTaskRegSet</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[dc]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[8f]"></a>OSTimeDly</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>

<P><STRONG><a name="[74]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED3
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED2
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED
</UL>

<P><STRONG><a name="[de]"></a>OSTimeDlyResume</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[df]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[e0]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[9b]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[dd]"></a>OSTaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[a1]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[af]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[d4]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[96]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[91]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[d0]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[4c]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[aa]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[69]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_imag_and_discor
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[6c]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegSet
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskRegGet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_imag_and_discor
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[a8]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[a6]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[a3]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>enc28j60ReadOp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60ReadOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>

<P><STRONG><a name="[e3]"></a>enc28j60WriteOp</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60_soft_RST
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
</UL>

<P><STRONG><a name="[e4]"></a>enc28j60ReadBuffer</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60ReadBuffer &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
</UL>

<P><STRONG><a name="[e5]"></a>enc28j60WriteBuffer</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enc28j60WriteBuffer &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
</UL>

<P><STRONG><a name="[e6]"></a>enc28j60SetBank</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>

<P><STRONG><a name="[e7]"></a>enc28j60Read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enc28j60Read &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60getrev
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
</UL>

<P><STRONG><a name="[e8]"></a>enc28j60Write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60clkout
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
</UL>

<P><STRONG><a name="[e9]"></a>enc28j60PhyWrite</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
</UL>

<P><STRONG><a name="[ea]"></a>enc28j60clkout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enc28j60clkout &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[eb]"></a>enc28j60_soft_RST</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>

<P><STRONG><a name="[ec]"></a>enc28j60Init</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PhyWrite
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60SetBank
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[ed]"></a>enc28j60getrev</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, enc28j60.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
</UL>

<P><STRONG><a name="[ee]"></a>enc28j60PacketSend</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[ef]"></a>enc28j60PacketReceive</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, enc28j60.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = enc28j60PacketReceive &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[86]"></a>SPI1_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI1_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
</UL>

<P><STRONG><a name="[e2]"></a>SPI1_ReadWrite</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteBuffer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadBuffer
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60WriteOp
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60ReadOp
</UL>

<P><STRONG><a name="[f6]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[f5]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[f8]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_netmask_valid
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[f7]"></a>lwip_ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[7e]"></a>lwip_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lwip_init &rArr; stats_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[fa]"></a>mem_init</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[101]"></a>mem_free</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[102]"></a>mem_trim</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mem_trim &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[103]"></a>mem_malloc</STRONG> (Thumb, 848 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mem_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>

<P><STRONG><a name="[104]"></a>mem_calloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>

<P><STRONG><a name="[fb]"></a>memp_init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[106]"></a>memp_malloc</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>

<P><STRONG><a name="[107]"></a>memp_free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, memp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
</UL>

<P><STRONG><a name="[fc]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[10c]"></a>netif_set_gw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[10b]"></a>netif_set_netmask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[108]"></a>netif_set_ipaddr</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[10a]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[7f]"></a>netif_add</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[80]"></a>netif_set_default</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[10d]"></a>netif_set_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[10f]"></a>netif_remove</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[203]"></a>netif_find</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>netif_set_up</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[111]"></a>netif_set_link_up</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netif.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[204]"></a>netif_set_link_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>pbuf_free</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_imag_and_discor
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[87]"></a>pbuf_alloc</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_imag_and_discor
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
</UL>

<P><STRONG><a name="[112]"></a>pbuf_alloced_custom</STRONG> (Thumb, 642 bytes, Stack size 32 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_alloced_custom &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[113]"></a>pbuf_realloc</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[114]"></a>pbuf_header</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[152]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[117]"></a>pbuf_ref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[115]"></a>pbuf_cat</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
</UL>

<P><STRONG><a name="[116]"></a>pbuf_chain</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[118]"></a>pbuf_dechain</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[119]"></a>pbuf_copy</STRONG> (Thumb, 788 bytes, Stack size 24 bytes, pbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
</UL>

<P><STRONG><a name="[11b]"></a>pbuf_copy_partial</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[11c]"></a>pbuf_take</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[11d]"></a>pbuf_coalesce</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[11f]"></a>pbuf_get_at</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>

<P><STRONG><a name="[11e]"></a>pbuf_memcmp</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[120]"></a>pbuf_memfind</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[121]"></a>pbuf_strstr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[173]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[205]"></a>raw_bind</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>raw_connect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>raw_sendto</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>

<P><STRONG><a name="[126]"></a>raw_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[127]"></a>raw_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[128]"></a>raw_new</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, raw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[f9]"></a>stats_init</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stats_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[fe]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[12b]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[12c]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>

<P><STRONG><a name="[12d]"></a>tcp_pcb_purge</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[12e]"></a>tcp_slowtmr</STRONG> (Thumb, 1466 bytes, Stack size 48 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[134]"></a>tcp_pcb_remove</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[138]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[139]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_update_rcv_ann_wnd &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[13a]"></a>tcp_recved</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[13b]"></a>tcp_recv_null</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>tcp_process_refused_data</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[13d]"></a>tcp_fasttmr</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[13e]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[13f]"></a>tcp_shutdown</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[140]"></a>tcp_abandon</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[109]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[141]"></a>tcp_bind</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[143]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[144]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[146]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[145]"></a>tcp_connect</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[208]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>tcp_alloc</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[14b]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[209]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>tcp_recv</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[14d]"></a>tcp_sent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[14e]"></a>tcp_err</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[20a]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>tcp_poll</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[20b]"></a>tcp_debug_state_str</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tcp.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>tcp_input</STRONG> (Thumb, 1842 bytes, Stack size 40 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[147]"></a>tcp_enqueue_flags</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[137]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[160]"></a>tcp_write</STRONG> (Thumb, 1770 bytes, Stack size 112 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[153]"></a>tcp_send_empty_ack</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[133]"></a>tcp_output</STRONG> (Thumb, 730 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[132]"></a>tcp_rst</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[130]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[156]"></a>tcp_rexmit</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[151]"></a>tcp_rexmit_fast</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[131]"></a>tcp_keepalive</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[12f]"></a>tcp_zero_window_probe</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[136]"></a>tcp_timer_needed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[fd]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[163]"></a>udp_input</STRONG> (Thumb, 634 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[89]"></a>udp_bind</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[166]"></a>udp_sendto_if</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[167]"></a>udp_sendto</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>

<P><STRONG><a name="[168]"></a>udp_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_imag_and_discor
</UL>

<P><STRONG><a name="[8a]"></a>udp_connect</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
</UL>

<P><STRONG><a name="[20c]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
</UL>

<P><STRONG><a name="[169]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[88]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
</UL>

<P><STRONG><a name="[16a]"></a>icmp_input</STRONG> (Thumb, 642 bytes, Stack size 48 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[164]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[16e]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[15b]"></a>inet_chksum_pseudo</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[170]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, inet_chksum.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[16c]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[16b]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[124]"></a>ip_route</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[171]"></a>ip_input</STRONG> (Thumb, 606 bytes, Stack size 32 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[125]"></a>ip_output_if</STRONG> (Thumb, 524 bytes, Stack size 56 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>

<P><STRONG><a name="[161]"></a>ip_output</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[15a]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[175]"></a>ip4_addr_netmask_valid</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>

<P><STRONG><a name="[176]"></a>ipaddr_aton</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
</UL>

<P><STRONG><a name="[177]"></a>ipaddr_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
</UL>

<P><STRONG><a name="[179]"></a>ipaddr_ntoa_r</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa
</UL>

<P><STRONG><a name="[178]"></a>ipaddr_ntoa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ip_addr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_ntoa_r
</UL>

<P><STRONG><a name="[17c]"></a>ip_reass_tmr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ip_frag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[172]"></a>ip_reass</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[174]"></a>ip_frag</STRONG> (Thumb, 636 bytes, Stack size 96 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[183]"></a>etharp_tmr</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>

<P><STRONG><a name="[10e]"></a>etharp_cleanup_netif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[187]"></a>etharp_find_addr</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, etharp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[110]"></a>etharp_request</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[18b]"></a>etharp_query</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[4f]"></a>etharp_output</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>ethernet_input</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp_config_app.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>ethernetif_input</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_imag_and_discor
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED3
</UL>

<P><STRONG><a name="[4b]"></a>ethernetif_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> udp_config_app.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>Get_imag_and_discor</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, imag_app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Get_imag_and_discor &rArr; udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED3
</UL>

<P><STRONG><a name="[77]"></a>FIFO_GPIO_Configuration</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FIFO_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED3
</UL>

<P><STRONG><a name="[79]"></a>VSYNC_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VSYNC_Init &rArr; VSYNC_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_EXTI_Configuration
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_NVIC_Configuration
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED3
</UL>

<P><STRONG><a name="[78]"></a>Ov7725_Init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ov7725_Init &rArr; SCCB_WriteByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED3
</UL>

<P><STRONG><a name="[76]"></a>SCCB_GPIO_Configuration</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LED3
</UL>

<P><STRONG><a name="[197]"></a>SCCB_WriteByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_WriteByte &rArr; SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SendByte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ov7725_Init
</UL>

<P><STRONG><a name="[198]"></a>SCCB_ReadByte</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SCCB_ReadByte &rArr; SCCB_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReceiveByte
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SendByte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_NoAck
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Ack
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ov7725_Init
</UL>

<P><STRONG><a name="[85]"></a>USART1_Config</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART1_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
</UL>

<P><STRONG><a name="[51]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[83]"></a>USART1_printf</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART1_printf &rArr; itoa
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_receive
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_task
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[122]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[18c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[211]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[212]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[213]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[216]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[100]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ov7725_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_aton
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>

<P><STRONG><a name="[217]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[218]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[219]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[60]"></a>SetSysClockTo72</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, system_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[5f]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[92]"></a>OS_InitTaskStat</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[97]"></a>OS_InitTaskIdle</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[98]"></a>OS_InitEventList</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[9a]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[9d]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[9c]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[a2]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[b2]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[b9]"></a>OS_FlagBlock</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[ff]"></a>plug_holes</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[135]"></a>tcp_close_shutdown</STRONG> (Thumb, 460 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
</UL>

<P><STRONG><a name="[142]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tcp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[4d]"></a>tcp_accept_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(.text)
</UL>
<P><STRONG><a name="[148]"></a>tcp_kill_prio</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[149]"></a>tcp_kill_timewait</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[150]"></a>tcp_receive</STRONG> (Thumb, 2162 bytes, Stack size 40 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[154]"></a>tcp_parseopt</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[155]"></a>tcp_process</STRONG> (Thumb, 1580 bytes, Stack size 32 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[157]"></a>tcp_listen_input</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[158]"></a>tcp_timewait_input</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tcp_in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[15c]"></a>tcp_output_alloc_header</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[15d]"></a>tcp_create_segment</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[15e]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[15f]"></a>tcp_write_checks</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, tcp_out.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[162]"></a>tcp_output_segment</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, tcp_out.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[165]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[16d]"></a>icmp_send_response</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, icmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[16f]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[17a]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[17b]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[17d]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[17e]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[17f]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 828 bytes, Stack size 48 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[180]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[181]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[4e]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ip_frag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>etharp_free_entry</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>

<P><STRONG><a name="[184]"></a>etharp_find_entry</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[185]"></a>etharp_send_ip</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = etharp_send_ip &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[186]"></a>etharp_update_arp_entry</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[188]"></a>etharp_arp_input</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = etharp_arp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[189]"></a>etharp_raw</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[18a]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, etharp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[18d]"></a>low_level_init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = low_level_init &rArr; enc28j60Init &rArr; enc28j60PhyWrite &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60clkout
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[50]"></a>low_level_output</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = low_level_output &rArr; enc28j60PacketSend &rArr; enc28j60Write &rArr; enc28j60SetBank &rArr; enc28j60WriteOp &rArr; SPI1_ReadWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketSend
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(.text)
</UL>
<P><STRONG><a name="[18e]"></a>low_level_input</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ethernetif.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enc28j60PacketReceive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[18f]"></a>VSYNC_GPIO_Configuration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VSYNC_GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Init
</UL>

<P><STRONG><a name="[190]"></a>VSYNC_NVIC_Configuration</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VSYNC_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Init
</UL>

<P><STRONG><a name="[193]"></a>VSYNC_EXTI_Configuration</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ov7725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VSYNC_EXTI_Configuration &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Init
</UL>

<P><STRONG><a name="[19a]"></a>SCCB_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sccb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReceiveByte
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_SendByte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WaitAck
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_NoAck
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Ack
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Stop
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_Start
</UL>

<P><STRONG><a name="[199]"></a>SCCB_Start</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[19c]"></a>SCCB_Stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[19d]"></a>SCCB_Ack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[19e]"></a>SCCB_NoAck</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_NoAck
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[19f]"></a>SCCB_WaitAck</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCCB_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[1a0]"></a>SCCB_SendByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCCB_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteByte
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[1a1]"></a>SCCB_ReceiveByte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sccb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCCB_ReceiveByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadByte
</UL>

<P><STRONG><a name="[1a5]"></a>itoa</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, usart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = itoa
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_printf
</UL>

<P><STRONG><a name="[1ad]"></a>_printf_core</STRONG> (Thumb, 664 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
